@page "/"
@using Prolangle.Languages.Framework
@using Prolangle.Services
@using Prolangle.Components

@inject GuessGame GuessGame
@inject LanguagesProvider LanguagesProvider

<h1>Guess a Language</h1>

@if (won)
{
	<h2>You won!</h2>
}

<Table>
	<TableHeader>
		<TableRow>
			<TableHeaderCell>Language</TableHeaderCell>
			<TableHeaderCell>Type System</TableHeaderCell>
			<TableHeaderCell>Execution Model</TableHeaderCell>
			<TableHeaderCell>Memory Management</TableHeaderCell>
			<TableHeaderCell>Syntax Style</TableHeaderCell>
			<TableHeaderCell>Known For Building</TableHeaderCell>
			<TableHeaderCell>Paradigms</TableHeaderCell>
			<TableHeaderCell>TIOBE Rating</TableHeaderCell>
			<TableHeaderCell>Appearance Year</TableHeaderCell>
		</TableRow>
	</TableHeader>
	<TableBody>
		@foreach (ILanguage language in RevealedLanguages)
		{
			<TableRow>
				<TableRowHeader>@language.Name</TableRowHeader>
			</TableRow>
		}
	</TableBody>
</Table>

<div style="width: 100%; overflow-x: auto">
	<table class="revealed-table table table-bordered">
		<thead>
		<tr>
			<th>Language</th>
			<th>Typing</th>
			<th>Compiled</th>
			<th>Memory Management</th>
			<th>Syntax Style</th>
			<th>Known For Building</th>
			<th>Paradigms</th>
			<th><a href="https://www.tiobe.com/tiobe-index/">TIOBE</a> Rating</th>
			<th>Appearance Year</th>
		</tr>
		</thead>
		<tbody>
		@foreach (ILanguage language in RevealedLanguages)
		{
			<tr class="language-row" @key="language.Id">
				<td>@language.Name</td>
				<td class="@TypingMatch(language) flags">
					<LanguageMetadatum Overlap="TypingOverlap(language)" Value="language.Typing" Exclude="TypeSystem.None"/>
				</td>
				<td class="@CompiledMatch(language)">@(language.Compiled ? "Compiled" : "Interpreted")</td>
				<td class="@GarbageCollectedMatch(language)">
					<LanguageMemoryManagement MemoryManagement="language.MemoryManagement"/>
				</td>
				<td class="@SyntaxStyleMatch(language)">
					<LanguageSyntaxStyle SyntaxStyle="language.SyntaxStyle"/>
				</td>
				<td class="@ApplicationsMatch(language) flags">
					<LanguageMetadatum Overlap="ApplicationsOverlap(language)" Value="language.KnownForBuilding" Exclude="Applications.None"/>
				</td>
				<td class="@ParadigmsMatch(language) flags">
					<LanguageMetadatum Overlap="ParadigmsOverlap(language)" Value="language.Paradigms" Exclude="Paradigms.None"/>
				</td>
				<td class="@TiobeRatingMatch(language)">@(language.TiobeRating?.ToString() ?? "None") @DirectionToString(TiobeRatingDirection(language))</td>
				<td class="@AppearanceYearMatch(language)">@language.AppearanceYear @DirectionToString(AppearanceYearDirection(language))</td>
			</tr>
		}
		</tbody>
	</table>
</div>

@if (!won)
{
	<LanguageSelection AvailableLanguages="@AvailableLanguages" OnLanguageSelected="@OnLanguageSelected"/>
}

@code {
	private List<ILanguage> AvailableLanguages => LanguagesProvider!.Languages.Where(l => !RevealedLanguages.Contains(l)).ToList();
	private List<ILanguage> RevealedLanguages { get; } = [];
	private ILanguage TargetLanguage => LanguagesProvider!.Languages.Single(l => l.Id == GuessGame!.TargetLanguageId);
	private bool won;

	private enum MatchType
	{
		Exact,
		Partial,
		None,
	}

	private enum Direction
	{
		Equal,
		Up,
		Down,
	}

	private static string DirectionToString(Direction direction)
	{
		return direction switch
		{
			Direction.Equal => "",
			Direction.Up => "\u25b2",
			Direction.Down => "\u25bc",
			_ => throw new ArgumentOutOfRangeException(nameof(direction), direction, null)
		};
	}

	private void OnLanguageSelected(ILanguage language)
	{
		RevealedLanguages.Insert(0, language);

		var result = GuessGame!.TargetLanguageId == language.Id;

		if (result)
			won = true;
	}

	private TypeSystem TypingOverlap(ILanguage language)
	{
		return language.Typing & TargetLanguage.Typing;
	}

	private Applications ApplicationsOverlap(ILanguage language)
	{
		return language.KnownForBuilding & TargetLanguage.KnownForBuilding;
	}

	private Paradigms ParadigmsOverlap(ILanguage language)
	{
		return language.Paradigms & TargetLanguage.Paradigms;
	}

	private Direction TiobeRatingDirection(ILanguage language)
	{
		if (language.TiobeRating is null && TargetLanguage.TiobeRating is null)
			return Direction.Equal;

		if (language.TiobeRating is null)
			return Direction.Up;

		if (TargetLanguage.TiobeRating is null)
			return Direction.Down;

		if (language.TiobeRating < TargetLanguage.TiobeRating)
			return Direction.Up;

		if (language.TiobeRating > TargetLanguage.TiobeRating)
			return Direction.Down;

		return Direction.Equal;
	}

	private Direction AppearanceYearDirection(ILanguage language)
	{
		if (language.AppearanceYear < TargetLanguage.AppearanceYear)
			return Direction.Up;

		if (language.AppearanceYear > TargetLanguage.AppearanceYear)
			return Direction.Down;

		return Direction.Equal;
	}

	private MatchType TypingMatch(ILanguage language)
	{
		var overlap = TypingOverlap(language);

		if (overlap == TypeSystem.None)
			return TargetLanguage.Typing == TypeSystem.None ? MatchType.Exact : MatchType.None;

		if (TargetLanguage.Typing == language.Typing)
			return MatchType.Exact;

		return MatchType.Partial;
	}

	private MatchType CompiledMatch(ILanguage language)
	{
		if (language.Compiled == TargetLanguage.Compiled)
			return MatchType.Exact;

		return MatchType.None;
	}

	private MatchType GarbageCollectedMatch(ILanguage language)
	{
		if (language.MemoryManagement == TargetLanguage.MemoryManagement)
			return MatchType.Exact;

		return MatchType.None;
	}

	private MatchType SyntaxStyleMatch(ILanguage language)
	{
		if (language.SyntaxStyle == TargetLanguage.SyntaxStyle)
			return MatchType.Exact;

		return MatchType.None;
	}

	private MatchType ApplicationsMatch(ILanguage language)
	{
		var overlap = ApplicationsOverlap(language);

		if (overlap == Applications.None)
			return MatchType.None;

		if (TargetLanguage.KnownForBuilding == language.KnownForBuilding)
			return MatchType.Exact;

		return MatchType.Partial;
	}

	private MatchType ParadigmsMatch(ILanguage language)
	{
		var overlap = ParadigmsOverlap(language);

		if (overlap == Paradigms.None)
			return MatchType.None;

		if (TargetLanguage.Paradigms == language.Paradigms)
			return MatchType.Exact;

		return MatchType.Partial;
	}

	private MatchType TiobeRatingMatch(ILanguage language)
	{
		if (language.TiobeRating is null && TargetLanguage.TiobeRating is null)
			return MatchType.Exact;

		if (language.TiobeRating is null)
			return MatchType.None;

		if (TargetLanguage.TiobeRating is null)
			return MatchType.None;

		// floating point comparison
		if (Math.Abs(language.TiobeRating.Value - TargetLanguage.TiobeRating.Value) <= double.Epsilon)
			return MatchType.Exact;

		return MatchType.None;
	}

	private MatchType AppearanceYearMatch(ILanguage language)
	{
		if (language.AppearanceYear == TargetLanguage.AppearanceYear)
			return MatchType.Exact;

		return MatchType.None;
	}

}
