@using System.Text
@using Prolangle.Extensions
@using Prolangle.Languages.Framework
@using Prolangle.Services

@inject LanguageMetadataProvider MetadataProvider;

@typeparam TEnum where TEnum : System.Enum

@{
    bool first = true;
    bool any = false;
}

@foreach (var flag in Enum.GetValues(typeof(TEnum)).Cast<TEnum>().Where(c => !Exclude.HasFlag(c)))
{
    any = true;

    if (!Value.HasFlag(flag) && !Overlap.HasFlag(flag))
        continue;

    var className = Overlap.HasFlag(flag) ? "Overlap" : "";

    var desc = MetadataProvider.ResolveDescription(flag);
    var moreInfoUrl = MetadataProvider.ResolveMoreInfoUrl(flag);

    var style = string.IsNullOrWhiteSpace(desc) ? "" : "border-bottom: 1px dotted black";

    if (!first)
    {
        <span>, </span>
    }

    string flagName = flag.GetDisplayName() ?? flag.ToString();

    <ExplanationPopover Content="@desc" Title="@flagName" Url="@moreInfoUrl">
        <span class="@className" style="@style">@flagName</span>
    </ExplanationPopover>

    first = false;
}

@if (!any)
{
    <span>N/A</span>
}

@code {
    [Parameter] public TEnum Overlap { get; set; }

    [Parameter] public TEnum Value { get; set; }

    [Parameter] public TEnum Exclude { get; set; }
}
