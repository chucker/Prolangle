@using System.Text
@using Prolangle.Extensions
@using Prolangle.Languages.Framework
@using Prolangle.Services

@inject LanguageMetadataProvider MetadataProvider;

@typeparam TEnum where TEnum : System.Enum

@{
	bool any = false;
}

@foreach (TEnum flag in Enum.GetValues(typeof(TEnum)).Cast<TEnum>().Where(c => !Exclude.HasFlag(c)))
{
	if (!Value.HasFlag(flag) && !Overlap.HasFlag(flag))
		continue;

	any = true;

	var className = Overlap.HasFlag(flag) ? "overlap" : "";

	var desc = MetadataProvider.ResolveDescription(flag);
	var moreInfoUrl = MetadataProvider.ResolveMoreInfoUrl(flag);

	var style = string.IsNullOrWhiteSpace(desc) ? "" : "text-decoration: underline; text-decoration-style: dotted; text-underline-offset: 2px; text-decoration-thickness: 1px; cursor: help;";

	string flagName = flag.GetDisplayName() ?? flag.ToString();

	<ExplanationPopover Content="@desc" Title="@flagName" Url="@moreInfoUrl" class="@className">
		<span style="@style">@flagName</span>
	</ExplanationPopover>
}

@if (!any)
{
	<span>N/A</span>
}

@code {

	[Parameter]
	public required TEnum Overlap { get; set; }

	[Parameter]
	public required TEnum Value { get; set; }

	[Parameter]
	public required TEnum Exclude { get; set; }

}
