@using Microsoft.JSInterop
@using System.Text.Json

@implements IAsyncDisposable

@inject IJSRuntime JS

@if (WillHavePopover)
{
    <div style="display: none">
        <div @ref="titleElement">
            @if (!string.IsNullOrWhiteSpace(Url))
            {
                <p>@Title</p>
                <p class="m-0 small"><a href="@Url" target="_blank">More Information</a></p>
            }
            else
            {
                <p class="m-0">@Title</p>
            }
        </div>
    </div>

    <span @ref="popoverElement">
        @ChildContent
    </span>
}
else
{
    @ChildContent
}

@code {
    private IJSObjectReference? jsModule;
    private ElementReference popoverElement;
    private ElementReference titleElement;

    bool WillHavePopover => !string.IsNullOrWhiteSpace(Content);

    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    [Parameter]
    public required string Content { get; set; }
    [Parameter]
    public required string Title { get; set; }
    [Parameter]
    public required string Url { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender && WillHavePopover)
        // {
        //     jsModule = await JS.InvokeAsync<IJSObjectReference>(
        //         "import", "./Components/ExplanationPopover.razor.js");
        //
        //     await jsModule.InvokeVoidAsync("ExplanationPopover.init",
        //         popoverElement, titleElement,
        //         GetSerializedOptions());
        // }
    }

    // ReSharper disable InconsistentNaming
    record BootstrapPopoverOptions(string content, bool html, string trigger);
    // ReSharper restore InconsistentNaming

    private string GetSerializedOptions()
    {
        return JsonSerializer.Serialize(new BootstrapPopoverOptions(Content, true, "click"));
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is null || !WillHavePopover)
            return;

        await jsModule.InvokeVoidAsync("ExplanationPopover.destroy", popoverElement);

        await jsModule.DisposeAsync();
    }

}
